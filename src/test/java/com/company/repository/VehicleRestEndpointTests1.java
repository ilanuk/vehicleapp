package com.company.repository;

import static junit.framework.TestCase.fail;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

import java.math.BigDecimal;
import java.net.URI;
import java.util.Date;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import com.company.MainApplication;
import com.company.model.Vehicle;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = MainApplication.class)
@WebAppConfiguration
public class VehicleRestEndpointTests1 {
    private static final String BASE_URI = "http://localhost:8080/api";
    private static final int UNKNOWN_ID = Integer.MAX_VALUE;

   
	@Test
	public void listVehiclesWorksOK() {
		RestTemplate template = new RestTemplate();
		ResponseEntity<Vehicle> result =
				template.getForEntity("http://localhost:8080/api/vehicles/1", 
						Vehicle.class);
		assertNotNull(result);
		assertNotNull(result.getBody());
		System.out.println(result.getBody().toString());
		Vehicle veh = result.getBody();
		System.out.println(veh.getName());
	}

    @Test
    public void test_get_one_success(){
		RestTemplate template = new RestTemplate();
        ResponseEntity<Vehicle> response = template.getForEntity(BASE_URI + "/vehicles/1", Vehicle.class);
        Vehicle vehicle = response.getBody();
        System.out.println(vehicle);
        assertThat(vehicle.getName(), is("Chevrolet Bolt EV"));
        assertThat(response.getStatusCode(), is(HttpStatus.OK));    
        
    }
    
    @Test
    public void test_get_by_id_failure_not_found(){
        try {
    		RestTemplate template = new RestTemplate();
            ResponseEntity<Vehicle> response = template.getForEntity(BASE_URI + "/vehicles/" + UNKNOWN_ID, Vehicle.class);
            fail("should return 404 not found");
        } catch (HttpClientErrorException e){
            assertThat(e.getStatusCode(), is(HttpStatus.NOT_FOUND));
        }
    }
    
    
    @Test
    public void test_create_new_vehicle_success(){
		Vehicle v = new Vehicle();
		v.setBatchNo(10);
		v.setName("Test Vehicle");
		v.setPrice(BigDecimal.valueOf(55L));
		v.setYearFirstMade(new Date());
		RestTemplate template = new RestTemplate();
        URI location = template.postForLocation(BASE_URI+ "/vehicles/" , v, Vehicle.class);
        assertThat(location, notNullValue());
    }

    
    @Test
    public void test_create_new_vehicle_doesNotfail_autoId(){
        try {
    		Vehicle v = new Vehicle();
    		v.setBatchNo(10);
    		v.setName("Test Vehicle");
    		v.setPrice(BigDecimal.valueOf(55L));
    		v.setYearFirstMade(new Date());
    		RestTemplate template = new RestTemplate();
            URI location = template.postForLocation(BASE_URI+ "/vehicles/" , v, Vehicle.class);
            location = template.postForLocation(BASE_URI+ "/vehicles/" , v, Vehicle.class);
            assertThat(location, notNullValue());
        } catch (HttpClientErrorException e){
        	//as the id is autogenerated
            assertThat(e.getStatusCode(), is(HttpStatus.OK));
        }
    }

    @Test
    public void test_update_vehicle_success(){
        Vehicle existingVehicle = new Vehicle();
		existingVehicle.setName("TestUpdate");
		RestTemplate template = new RestTemplate();
        template.put(BASE_URI + "/vehicles/" + 2, existingVehicle);
    }

    @Test
    public void test_update_vehicle_fail(){
        Vehicle existingVehicle = new Vehicle();
        try {
    		RestTemplate template = new RestTemplate();
            template.put(BASE_URI + "/vehicles/" + UNKNOWN_ID, existingVehicle);
            fail("should return 404 not found");
        } catch (HttpClientErrorException e){
        	System.out.println(e.getStatusCode() + ":" + e.getStatusText());
            assertThat(e.getStatusCode(), is(HttpStatus.NOT_FOUND));
        }
    }

    // =========================================== Delete Vehicle ============================================

    @Test
    public void test_delete_vehicle_success(){
		RestTemplate template = new RestTemplate();
        template.delete(BASE_URI + "/vehicles/" + 11);
    }

    @Test
    public void test_delete_vehicle_fail(){
        try {
    		RestTemplate template = new RestTemplate();
            template.delete(BASE_URI + "/vehicles/" + UNKNOWN_ID);
            fail("should return 404 not found");
        } catch (HttpClientErrorException e){
            assertThat(e.getStatusCode(), is(HttpStatus.NOT_FOUND));
        }
    }

    @Test
    public void getLastVehicle(){
		ParameterizedTypeReference<List<Vehicle>>  parameterizedTypeReference = new ParameterizedTypeReference<List<Vehicle>>(){};
		RestTemplate template = new RestTemplate();
        ResponseEntity<List<Vehicle>> response =
        		template.exchange(BASE_URI+"/vehicles", HttpMethod.GET,null,parameterizedTypeReference);
        List<Vehicle> vehicles = response.getBody();
        Vehicle lst = vehicles.get(vehicles.size() - 1);
        System.out.println(lst);
        assertNotNull(lst);
    }

    
    
    // =========================================== CORS Headers ===========================================

    
}
